PART
{
    // Kerbal Space Program - Part Config
    // an decoupler part for the garage

    // --- general parameters ---
    name = KKAOSS_garage_decoupler_g
    module = Part
    author = Nils277

    // --- asset parameters ---

    MODEL
    {
        model = PlanetaryBaseInc/BaseSystem/Parts/Utility/Garages/garage_decoupler_g
    }
    sound_vent_large = decouple
    fx_gasBurst_white = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, decouple

    scale = 1
    rescaleFactor = 1
    
    // --- node definitions ---
    node_stack_top =    0, 0.175,  0, 0,  1, 0, 2
    node_stack_bottom = 0, -0.175, 0, 0, -1, 0, 2
    
    // --- editor parameters ---
    TechRequired = composites
    entryCost = 2000
    cost = 650
    category = Payload
    subcategory = 0
    title = #LOC_KPBS.garagedecoupler.title
    manufacturer = #LOC_KPBS.agency
    description = #LOC_KPBS.garagedecoupler.description


    // attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
    attachRules = 1,0,1,1,1

    // --- standard part parameters ---
    mass = 0.3
    dragModelType = default
    maximum_drag = 0.2
    minimum_drag = 0.2
    angularDrag = 1
    crashTolerance = 20
    maxTemp = 1500
    fuelCrossFeed = True
    bulkheadProfiles = mk3, PlanetaryBase
    tags = #LOC_KPBS.garagedecoupler.tags
    
	MODULE
	{
		name = ModuleDecouple
		ejectionForce = 400
		explosiveNodeID = top
	}
	MODULE
	{
		name = ModuleToggleCrossfeed
		crossfeedStatus = false
		toggleEditor = true
		toggleFlight = true
	}
    MODULE
	{
		name = ModuleKPBSMeshToggle
		transformNames = Cover
		showMeshString = #LOC_KPBS.garagedecoupler.show
        hideMeshString = #LOC_KPBS.garagedecoupler.hide
		availableInFlight = false
	}
    MODULE
	{
		name = ModuleTestSubject
		useStaging = True
		useEvent = False
		situationMask = 127
		CONSTRAINT
		{
			type = REPEATABILITY
			value = ALWAYS
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = BODYANDSITUATION
			prestige = Significant
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = ONCEPERPART
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = GT
			value = 0 // this just registers altitude as something to care about
			situationMask = 8
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 4000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 8000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 2000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 4000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 1000
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 2000
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEED
			test = LT
			value = 2000
			situationMask = 8
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = LT
			value = 300000
			situationMask = 16
			body = _NotSun
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = LT
			value = 600000
			situationMask = 32
			body = _NotSun
		}
	}
}
